using System;

interface IDevice
{
    string name { get; }
    string description { get; }
}

interface ICopyrable<T>
{
    T Copyr();
}

class Device : IDevice, ICopyrable<Device>, IComparable<Device>
{
    public string name { get; }
    public string description { get; }

    public Device(string name, string description)
    {
        this.name = name;
        this.description = description;
    }

    public int CompareTo(Device other)
    {
        return this.name.CompareTo(other.name);
    }

    public Device Copyr()
    {
        return new Device(name, description);
    }
}

class CompareByDescriptionAsc : IComparer<Device>
{
    public int Compare(Device x, Device y)
    {
        return x.description.Length.CompareTo(y.description.Length);
    }
}

class CompareByDescriptionDesc : IComparer<Device>
{
    public int Compare(Device x, Device y)
    {
        return y.description.Length.CompareTo(x.description.Length);
    }
}
class Airplane : Device
{
    public string engineType { get; }
    public int powersize { get; }

    public Airplane(string name, string description, string engineType, int powersize)
        : base(name, description)
    {
        this.engineType = engineType;
        this.powersize = powersize;
    }
}

class Vertolit : Device
{
    public string engineType { get; }
    public int powersize { get; }

    public Vertolit(string name, string description, string engineType, int powersize)
        : base(name, description)
    {
        this.engineType = engineType;
        this.powersize = powersize;
    }
}

class Balloon : Device
{
    public string materialKonverta { get; }
    public int volume { get; }

    public Balloon(string name, string description, string materialKonverta, int volume)
        : base(name, description)
    {
        this.materialKonverta = materialKonverta;
        this.volume = volume;
    }
}

class DeltaPlan : Device
{
    public string materialKrula { get; }
    public double rosmahKrula { get; }

    public DeltaPlan(string name, string description, string materialKrula, double rosmahKrula)
        : base(name, description)
    {
        this.materialKrula = materialKrula;
        this.rosmahKrula = rosmahKrula;
    }
}

class FlyingCarpet : Device
{
    public string materialP { get; }
    public string color { get; }

    public FlyingCarpet(string name, string description, string materialP, string color)
        : base(name, description)
    {
        this.materialP = materialP;
        this.color = color;
    }
}

class Registry
{
    private Device[] obladnannya = new Device[0];

    public void AddObladnanya(Device device)
    {
        Array.Resize(ref obladnannya, obladnannya.Length + 1);
        obladnannya[obladnannya.Length - 1] = device;
    }

    public void DisplayAllObladnanya()
    {
        foreach (var device in obladnannya)
        {
            Console.WriteLine($"{device.name} - {device.description}");
        }
    }

    public void SortByName()
    {
        Array.Sort(obladnannya); // IComparable
    }

    public void SortByDescriptionAsc()
    {
        Array.Sort(obladnannya, new CompareByDescriptionAsc());
    }

    public void SortByDescriptionDesc()
    {
        Array.Sort(obladnannya, new CompareByDescriptionDesc());
    }
}

class Program
{
    static void Main()
    {
        Registry registry = new Registry();

        registry.AddObladnanya(new Airplane("BF 53", "big", "Turbo", 56000));
        registry.AddObladnanya(new Vertolit("M 58", "medium", "Turbo", 1922));
        registry.AddObladnanya(new Balloon("HG 67", "thermal", "Nylon", 1222));
        registry.AddObladnanya(new DeltaPlan("AP 87", "High plan", "Complex", 1));
        registry.AddObladnanya(new FlyingCarpet("Fast", "Magic", "Wool", "Red"));

        Console.WriteLine("До сортування:");
        registry.DisplayAllObladnanya();

        Console.WriteLine("\nСортування за назвою:");
        registry.SortByName();
        registry.DisplayAllObladnanya();

        Console.WriteLine("\nСортування за довжиною опису (зростання):");
        registry.SortByDescriptionAsc();
        registry.DisplayAllObladnanya();

        Console.WriteLine("\nСортування за довжиною опису (спадання):");
        registry.SortByDescriptionDesc();
        registry.DisplayAllObladnanya();
    }
}
