using System;
using System.Collections.Generic;
using System.Linq;

interface IDevice
{
    string name { get; }
    string description { get; }
}

interface IEngine
{
    string engineType { get; }
    int powersize { get; }
}

interface IPart
{
    string partName { get; }
    string material { get; }
}

interface ICopyrable<T>
{
    T Copyr();
}

class Device : IDevice, ICopyrable<Device>
{
    public string name { get; }
    public string description { get; }

    public Device(string name, string description)
    {
        this.name = name;
        this.description = description;
    }

    public Device Copyr()
    {
        return new Device(name, description);
    }
}

class Airplane : Device, IEngine, ICopyrable<Airplane>
{
    public string engineType { get; }
    public int powersize { get; }

    public Airplane(string name, string description, string engineType, int powersize) : base(name, description)
    {
        this.engineType = engineType;
        this.powersize = powersize;
    }

    public Airplane Copyr()
    {
        return new Airplane(name, description, engineType, powersize);
    }
}

class Vertolit : Device, IEngine, ICopyrable<Vertolit>
{
    public string engineType { get; }
    public int powersize { get; }
    public KrulaVertolit[] krulavertolit { get; }

    public Vertolit(string name, string description, string engineType, int powersize, List<KrulaVertolit> krulavertolit) : base(name, description)
    {
        this.engineType = engineType;
        this.powersize = powersize;
        this.krulavertolit = krulavertolit;
    }

    public Vertolit Copyr()
    {
        KrulaVertolit[] CopyrKrulavertolit = new KrulaVertolit();
        foreach (var krulo in krulavertolit)
        {
            CopyrKrulavertolit.Add(krulo.Copyr());
        }
        return new Vertolit(name, description, engineType, powersize, CopyrKrulavertolit);
    }
}

class KrulaVertolit : IPart, ICopyrable<KrulaVertolit>
{
    public string partName => "KruloVertolit";
    public string material { get; }

    public KrulaVertolit(string material)
    {
        this.material = material;
    }

    public KrulaVertolit Copyr()
    {
        return new KrulaVertolit(material);
    }
}

class Balloon : Device, ICopyrable<Balloon>
{
    public string materialKonverta { get; }
    public int volume { get; }

    public Balloon(string name, string description, string materialKonverta, int volume) : base(name, description)
    {
        this.materialKonverta = materialKonverta;
        this.volume = volume;
    }

    public Balloon Copyr()
    {
        return new Balloon(name, description, materialKonverta, volume);
    }
}

class DeltaPlan : Device, ICopyrable<DeltaPlan>
{
    public string materialKrula { get; }
    public double rosmahKrula { get; }

    public DeltaPlan(string name, string description, string materialKrula, double rosmahKrula) : base(name, description)
    {
        this.materialKrula = materialKrula;
        this.rosmahKrula = rosmahKrula;
    }

    public DeltaPlan Copyr()
    {
        return new DeltaPlan(name, description, materialKrula, rosmahKrula);
    }
}

class FlyingCarpet : Device, ICloneable<FlyingCarpet>
{
    public string materialP { get; }
    public string color { get; }

    public FlyingCarpet(string name, string description, string materialP, string color) : base(name, description)
    {
        this.materialP = materialP;
        this.color = color;
    }

    public FlyingCarpet Copyr()
    {
        return new FlyingCarpet(name, description, materialP, color);
    }
}

class Registry
{
    private IDevice[] obladnananya = new IDevice();

    public void AddObladnanya(IDevice device)
    {
        obladnananya.Add(device);
    }

    public void DisplayAllObladnanya()
    {
        foreach (var device in obladnananya)
        {
            Console.WriteLine(device.name + " - " + device.description);
        }
    }

    public void DisplayObladnanyaWithEngines()
    {
        foreach (var device in obladnananya.OfType<IEngine>())
        {
            Console.WriteLine(device.name + " (Engine: " + device.engineType + ")");
        }
    }

    public void DisplayObladnanyaWithoutEngines()
    {
        foreach (var device in obladnananya)
        {
            if (!(device is IEngine))
            {
                Console.WriteLine(device.name);
            }
        }
    }

    public void SortByName()
    {
        obladnananya = obladnananya.OrderBy(e => e.name).ToList();  //сортування (лямда вираз)
    }

    public void SortZrostanna()
    {
        obladnananya = obladnananya.OrderBy(e => e.description.Length).ToList();
    }

    public void SortSpadanna()
    {
        obladnananya = obladnananya.OrderByDescending(e => e.description.Length).ToList(); 
    }

    public T[] CopyObladnanya<T>() where T : IDevice, ICopyrable<T>
    {
        T[] copies = new T();
        foreach (var device in obladnananya.OfType<T>())
        {
            copies.Add(device.Copyr());
        }
        return copies;
    }
}

class Program
{
    static void Main(string[] args)
    {
        Registry registry = new Registry();

        Airplane airplane1 = new Airplane("BF 53", "big", "Turbo", 56000);
        Vertolit vertolit1 = new Vertolit("M 58", "medium ", "Turbo", 1922, new KrulaVertolit[] { new KrulaVertolit("Complex"), new KrulaVertolit("Metal") });
        Balloon balloon1 = new Balloon(" HG 67", "thermal ", "Nylon",1222);
        DeltaPlan deltaPlan1 = new DeltaPlan("AP 87 ", "High plan", "Complex", 1);
        FlyingCarpet flyingCarpet1 = new FlyingCarpet("Fast", "Magic ", "Wool", "Red");

        registry.AddObladnanya(airplane1);
        registry.AddObladnanya(vertolit1);
        registry.AddObladnanya(balloon1);
        registry.AddObladnanya(deltaPlan1);
        registry.AddObladnanya(flyingCarpet1);

        registry.DisplayAllObladnanya();
        Console.WriteLine();

        registry.DisplayObladnanyaWithEngines();
        Console.WriteLine();

        registry.DisplayObladnanyaWithoutEngines();
        Console.WriteLine();

        registry.SortByName();
        registry.DisplayAllObladnanya();
        Console.WriteLine();

        registry.SortZrostanna();
        registry.DisplayAllObladnanya();
        Console.WriteLine();

        registry.SortSpadanna();
        registry.DisplayAllObladnanya();
        Console.WriteLine();

        Airplane[] airplaneCopies = registry.CopyObladnanya<Airplane>();
        Console.WriteLine("Number of airplane copies: " + airplaneCopies.Count);
    }
}
