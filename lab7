using System;
using System.Collections;
using System.Collections.Generic;
using System.IO;
using System.Linq;

namespace Catalog

{
    public interface IContainer<TElement>
    {
        int Count { get; }
        TElement this[int index] { get; set; } 
        void Add(TElement element);
        void Delete(TElement element);
     public interface IFileContainer : IContainer<File>
    {
        void Save(string fileName);
        void Load(string fileName);
        bool IsDataSaved { get; }
    public class Person : IComparable<Person>, ICloneable //два інтерфейси
    {
        public string Name { get; set; }
        public string Surname { get; set; }
        public DateTime BirthDate { get; set; }

        public Person(string name, string surname, DateTime birthDate)
        {
            Name = name;
            Surname = surname;
            BirthDate = birthDate;
        }

        public int CompareTo(Person other)
        {
            if (other == null) return 1;

            int surnameComparison = Surname.CompareTo(other.Surname);
            if (surnameComparison != 0) return surnameComparison;

            int nameComparison = Name.CompareTo(other.Name);
            if (nameComparison != 0) return nameComparison;

            return BirthDate.CompareTo(other.BirthDate);
        }

        public object Clone() //метод icloneable копіює обєкт Person
        {
            return new Person(this.Name, this.Surname, this.BirthDate);
        }

        public override string ToString() => $"Name: {Name}, Surname: {Surname}, BirthDate: {BirthDate.ToShortDateString()}"; // перевизначення повертає ряд person
    }

    public enum Kind { SystemPrograms, UserPrograms, Documents } // перерахування 

    public class File
    {
        public string FName { get; set; }
        public string User { get; set; }
        public DateTime Timelast { get; set; } //зміна файлу(час)

        public File(string fname, string user, DateTime timelast)
        {
            FName = fname;
            User = user;
            Timelast = timelast;
        }

        public override string ToString() => $"FName: {FName}, User: {User}, Timelast: {Timelast}";
    }

    public class Catalog : IFileContainer, IEnumerable<File> filecont розширює  icontainer
    {
        private string name;
        private string opus; \\ опис класу
        private int size;
        privet Kind;\\ тип каталогу
        private File fileList; \\ список 
        private bool IsSave = false; \\ чи було збережено

        public Catalog(string name, string opus, int size, Kind kind)
        {
            this.name = name;
            this.opus = opus;
            this.size = size;
            this.kind = kind;
            this.fileList = new File(); \\ порожній список для зберігання обєктів
        }
public int Count=> fileList.Count; \\ властивість що поверт кілк елем
public File this [int index]
{
 get
{ if (index< 0 || index >=fileList.Count);
{
throw new 
    IndexOurOfRangeException("Індекс за межами діапазону");
}
return fileList[index];
}
set
 { if (index< 0 || index >=fileList.Count);
{
throw new 
    IndexOurOfRangeException("Індекс за межами діапазону");
}
fileList[index] = value;
}
public void plusElem (File element) 
{ 
fileList.Add(element);
IsSave = false;
}
public void delElem (File element) 
{ 
fileList.Remove(element);
IsSave = false;
}
    public void issave(string fName);
{
try
{ using (StreamWriter sw = new StreamWriter(fName))
{
    sw.WriteLine(name);
    sw.WriteLine(opus);
    sw.WriteLine(size);
    sw.WriteLine(kind);

    foreach ( File file in fileList)
{
     sw.WriteLine($"{FName}|{file.User}|{file.Timelast}")
}  
    IsSave = true;
}
}

    catch (Exception ex) \\виняток
{ 
  Console.WriteLine("Помилка");
    issave = false;
}
}

public void Load(string fName)
{
    try 
    {
        if(File.Exists(fName)) \\ перевірка шляху
           { 
                using (StreamReader rr = new StreamReader(fName))
                {
                    name = rr.ReadLine();
                    opus = rr.ReadLine();
                    if (int.TryParse(rr.ReadLine(), out int s)
                        {size = s;}
                    if (Enum.TryParse(rr.ReadLine(), out Kind k)
                        {kind = k;}
                    fileList.Clear();
                    string line;
                    while (line = rr.Reader()) != null) 
                        { string[] p = line.Split('|');
                            if (p.Length == 3 && DateTime.TryParse(p[2], out DataTime time)) 
                              { fileList.Add( new File(p[0], p[1], time));
                        }
                        }
                        issave = true;
                        }
                        else
                        {
                            Console.WriteLine("Файл не знайдено");
                        issave = false;
                        }
                        catch (Exception ex)
                        { Console.WriteLine("Error!");
                        issave = false;
                        }
                        }
                        public bool IsDataSaved => issave;
public IEnumerator<File> GetEnumerator()
        {
            return fileList.GetEnumerator();
        }

        IEnumerator IEnumerable.GetEnumerator()
        {
            return GetEnumerator();
        }

        public void Sort()
        {
            fileList.Sort((f1, f2) => f1.FName.CompareTo(f2.FName));
        }

        public Catalog copyel1(int count)
        {
            Catalog catalogcop = new Catalog("catalogcop", "Copied elements", count, this.kind);
            int copyel = Math.Min(count, fileList.Count);
            for (int i = 0; i < copyel; i++)
            {
                catalogcop.Add(fileList[i]);
            }
            return catalogcop;
        }
    }

    class Program
    {
        static void Main(string[] args)
        {
            Person[] people = new people();
            people.Add(new Person("Іван", "Петренко", new DateTime(1990, 5, 15)));
            people.Add(new Person("Марія", "Сидоренко", new DateTime(1985, 12, 20)));
            people.Add(new Person("Петро", "Іванов", new DateTime(2000, 3, 10)));

            people.Sort();

            Console.WriteLine("Відсортовані об'єкти Person:");
            foreach (Person person in people)
            {
                Console.WriteLine(person);
            }

            Catalog catalog = new Catalog("MyCatalog", "Description", 100, Kind.Documents);
            catalog.Add(new File("doc1.txt", "user1", DateTime.Now.AddDays(-1)));
            catalog.Add(new File("image.jpg", "user2", DateTime.Now.AddHours(-5)));
            catalog.Add(new File("report.docx", "user1", DateTime.Now));

            Console.WriteLine("\nВміст каталогу:");
            foreach (File file in catalog)
            {
                Console.WriteLine(file);
            }

            catalog.Sort();
            Console.WriteLine("\nВміст відсортованого каталогу:");
            foreach (File file in catalog)
            {
                Console.WriteLine(file);
            }

            catalog.Add(new File("new_file.txt", "guest", DateTime.Now.AddDays(1)));
            Console.WriteLine("\nВміст каталогу після додавання:");
            foreach (File file in catalog)
            {
                Console.WriteLine(file);
            }

            Catalog copiedCatalog = catalog.copyel1(2);
            Console.WriteLine("\nВміст скопійованого каталогу:");
            foreach (File file in copiedCatalog)
            {
                Console.WriteLine(file);
            }
        }
    }
}
